- name: "Delete persistent volume claim: '{{ persistent_volume_claim.name }}' from '{{ project_namespace.name }}' on '{{ ocp_cluster.hostname }}'"
  when: seaa_automation_strategy == "inline"
  kubernetes.core.k8s:
    api_key: "{{ ocp_cluster.auth_token }}"
    state: absent
    namespace: "{{ project_namespace.name }}"
    kind: PersistentVolumeClaim
    name: "{{ persistent_volume_claim.name }}"
    api_version: "{{ persistent_volume_claim.apiVersion }}"
    wait: "{{ seaa_undeploy_wait | bool }}" # yes
    wait_timeout: "{{ seaa_undeploy_wait_timeout | int }}" # 600
    continue_on_error: "{{ seaa_undeploy_continue_on_error | bool }}"


- name: Delete persistentVolumeClaim with YAML file
  when: seaa_automation_strategy == "generate_deploy_yaml" or seaa_automation_strategy == "generate_yaml" or seaa_automation_strategy == "deploy_yaml"
  block:

    - name: Include task to generate yaml file
      when:
        - seaa_automation_strategy != "deploy_yaml"
      ansible.builtin.include_tasks: "{{ seaa_ansible_directory }}/tasks/generate_yaml.yml"
      vars:
        src: "{{ seaa_ansible_directory }}/yamls/ocp/persistent-volume-claim.yaml"
        destination_file: "persistent-volume-claim.yaml"
        is_ocp_resource: true

    - name: "Delete persistentVolumeClaim with Native YAML API: '{{ project_namespace.name }}' on '{{ ocp_cluster.hostname }}'"
      when: seaa_automation_strategy != "generate_yaml"
      kubernetes.core.k8s:
        state: absent
        namespace: "{{ project_namespace.name }}"
        definition: "{{ lookup('template', seaa_ansible_directory~'/yamls/ocp/persistent-volume-claim.yaml') | from_yaml }}"

    - name: Check for deletion of PVC
      ansible.builtin.pause:
        prompt: "Delete YAML for PersistentVolumeClaim resource, press enter to continue ...:"
      when:
        - seaa_automation.prompt_during_automation | bool
        - seaa_automation.track_resources | bool
