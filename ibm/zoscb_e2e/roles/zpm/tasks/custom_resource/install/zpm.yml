#
# Copyright 2023 IBM Inc. All rights reserved
# SPDX-License-Identifier: Apache2.0
#

- name: Include debug resource task
  ansible.builtin.include_tasks: "{{ zoscb_e2e_roles_directory }}/common/tasks/debug_resource.yml"
  vars:
    resource_variable: "{{ zos_package_manager }}"
  when: seaa_automation.debug | bool

- name: Create zpm Instance with YAML file
  when: seaa_automation_strategy == "generate_deploy_yaml" or seaa_automation_strategy == "generate_yaml" or seaa_automation_strategy == "deploy_yaml"
  block:

    - name: Make sure that atleast one registry exist in array
      when:
        - zpm_registries is undefined or zpm_registries is none or zpm_registries | length == 0
      ansible.builtin.set_fact:
        zpm_registries:
          - host: "{{ zpm_registry.host }}"
            user: "{{ zpm_registry.user }}"
            password: "{{ zpm_registry.password }}"

    - name: Include task to generate yaml file
      when:
        - seaa_automation_strategy != "deploy_yaml"
      ansible.builtin.include_tasks: "{{ seaa_ansible_directory }}/tasks/generate_yaml.yml"
      vars:
        src: "{{ seaa_ansible_directory }}/yamls/operators/instances/zpm-instance.yaml"
        destination_file: "{{ oc_product.short_name }}-{{ product_filename }}_Instance.yaml"
        is_zos_resource: true
        zos_endpoint: "{{ endpoint }}"

    # Capture start time when seaa_capture_deployment_wait_time flag set
    - name: Get timestamp from the system
      when:
        - seaa_capture_deployment_wait_time | bool
        - seaa_automation_strategy != "deploy_yaml"
      ansible.builtin.shell: "echo $(($(date +'%s * 1000 + %-N / 1000000')))"
      register: start_tstamp_ns
      no_log: "{{ not seaa_automation.debug }}"
      changed_when: start_tstamp_ns != 0

    - name: "Create zpm Instance '{{ zos_package_manager.name }}' with Native YAML API: '{{ project_namespace.name }}' on '{{ ocp_cluster.hostname }}'"
      when: seaa_automation_strategy != "generate_yaml"
      kubernetes.core.k8s:
        state: present
        namespace: "{{ project_namespace.name }}"
        definition: "{{ lookup('template', seaa_ansible_directory~'/yamls/operators/instances/zpm-instance.yaml') | from_yaml }}"
      register: mapped_suboperator
      until: "mapped_suboperator.failed == false"
      failed_when: mapped_suboperator.failed == true
      retries: "{{ seaa_deploy_yaml_retries | int }}" # 5
      delay: "{{ seaa_deploy_yaml_delay | int }}" # 30

    - name: Block to Handle Wait for updated CSV for ZPM instance
      when:
        - new_csv_deployed is defined and new_csv_deployed
        - seaa_automation_strategy != "generate_yaml"
      block:
        - name: "Wait for ZPM instance to start reconcile due to CSV update sub-operator CR {{ zos_package_manager.kind }}: '{{ zos_package_manager.name }}\
            ' from '{{ project_namespace.name }}' on '{{ ocp_cluster.hostname }}'"
          kubernetes.core.k8s_info:
            api_key: "{{ ocp_cluster.auth_token }}"
            kind: "{{ zos_package_manager.kind }}"
            namespace: "{{ project_namespace.name }}"
            name: "{{ zos_package_manager.name }}"
            api_version: "{{ zos_package_manager.apiVersion }}"
          register: zos_package_manager_updated
          until:
            - zos_package_manager_updated.resources is defined and zos_package_manager_updated.resources | length > 0
            - "'status' in zos_package_manager_updated.resources[0]"
            - zos_package_manager_updated.resources[0].status.phase == 'Running'
          retries: "{{ seaa_deploy_yaml_retries / 2 | int }}" # 5
          delay: "{{ seaa_deploy_yaml_delay / 2 | int }}" # 30
      always:
        - name: Reset new csv fact
          ansible.builtin.set_fact:
            new_csv_deployed: false

- name: Pause for ZPM instance '{{ zos_package_manager.name }}' to be available.
  when: seaa_automation.prompt_during_automation | bool
  block:
    - name: Debug var zos_package_manager
      ansible.builtin.debug:
        var: zos_package_manager

    - name: Waiting for user response
      ansible.builtin.pause:
        prompt: "Check to see if '{{ zos_package_manager.name }}' instance has installed on '{{ ocp_cluster.hostname }}' \
                 in project '{{ project_namespace.name }}'"

- name: "Wait for installation of sub-operator CR {{ zos_package_manager.kind }}: '{{ zos_package_manager.name }}' in '{{ project_namespace.name }}\
          ' on '{{ ocp_cluster.hostname }}'"
  when: seaa_automation_strategy != "generate_yaml"
  kubernetes.core.k8s_info:
    api_key: "{{ ocp_cluster.auth_token }}"
    kind: "{{ zos_package_manager.kind }}"
    namespace: "{{ project_namespace.name }}"
    name: "{{ zos_package_manager.name }}"
    api_version: "{{ zos_package_manager.apiVersion }}"
  register: zos_package_manager_info
  until: "zos_package_manager_info.resources[0] is defined and
          zos_package_manager_info.resources | length > 0 and
          'status' in zos_package_manager_info.resources[0] and
          (zos_package_manager_info.resources[0].status.phase == 'Succeeded' or zos_package_manager_info.resources[0].status.phase == 'Failed')"
  failed_when: "'status' in zos_package_manager_info.resources[0] and
                zos_package_manager_info.resources[0].status.phase != 'Succeeded'"
  retries: "{{ seaa_deploy_retries | int }}" # 120
  delay: "{{ seaa_deploy_delay | int }}" # 10

- name: Capture Deploy Wait time
  when:
    - seaa_automation_strategy != "deploy_yaml"
    - seaa_capture_deployment_wait_time | bool and start_tstamp_ns is defined
  block:
    - name: Capture wait time and add to deploy script
      ansible.builtin.include_role:
        name: zos_dev_envs
        tasks_from: capture_deploy_time
      vars:
        resource_kind: "{{ zos_package_manager.kind }}"
        _script_command_comment: "Wait for '{{ zos_package_manager.name }}' '{{ zos_package_manager.kind }}' {{ deploy_type }}ment"
        _deployment_file: "{{ seaa_yaml_single_deployment_file }}"
        _deploy_name: "{{ zos_package_manager.name }}"
        _deploy_file: "{{ oc_product.short_name }}-{{ product_filename }}_Instance.yaml"
