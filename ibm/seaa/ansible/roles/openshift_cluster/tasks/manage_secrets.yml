#
# Copyright 2023 IBM Inc. All rights reserved
# SPDX-License-Identifier: Apache2.0
#

---
- name: Set variables and facts for manage secrets task
  ansible.builtin.set_fact:
    _seaa_encrypt_secrets: "{{ seaa_encrypt_secrets | bool }}"
    _deploy_type: "{{ deploy_type | default(seaa_deploy_strategy, true) }}"
    _ssh_key_name: "{{ seaa_sshkey_secrets_prefix }}{{ endpoint.username }}-{{ endpoint.name }}"
    tmp_dir: "{{ lookup('env', 'HOME') }}/.seaa/_tmp_"
    secret_deployed: false
    clean_tmp_files: true
    no_log: "{{ seaa_security_secure_log | default(true) | bool }}"
    _resource_kind: "{{ resource_kind | default('') }}" # OCP resource kind
    _cred_type: "{{ cred_type | default('Personal') }}" # Personal or Shared
    _secret_type: "{{ secret_type | default('sshkey') }}" # sshkey or registry
    _zpm_registries: "{{ registry | default(None) }}" # List of registries

- name: Deploy Encrypted registry Secrets with Binary
  when:
    - _secret_type == "registry"
    - seaa_deploy_secrets | bool
    - _deploy_type == "deploy" or _deploy_type == "testing"
  no_log: "{{ no_log }}"
  block:

    - name: Make sure that atleast one registry exist
      when:
        - _zpm_registries is undefined or _zpm_registries is none or _zpm_registries | length == 0
      ansible.builtin.set_fact:
        _zpm_registries:
          host: "{{ zpm_registry.host }}"
          user: "{{ zpm_registry.user }}"
          password: "{{ zpm_registry.password }}"

    - name: Deploy All Registry for endpoint
      ansible.builtin.include_role:
        name: openshift_cluster
        tasks_from: manage_registries
      with_items:
        - "{{ _zpm_registries }}"
      loop_control:
        loop_var: current_zpm_registry

- name: Deploy Encrypted SSHKeys Secrets with Binary
  when:
    - _secret_type == "sshkey"
    - seaa_deploy_secrets | bool
    - _seaa_encrypt_secrets
    - _deploy_type == "deploy" or _deploy_type == "testing"
    - (seaa_deploy_role == "admin") or
      (oc_product.credential_type == "personal" and seaa_deploy_role == "developer") # Create credential if admin or personal-developer
  no_log: "{{ no_log }}"
  block:

    - name: Set SSH Key file to encrypt
      ansible.builtin.set_fact:
        sshkeyfile: "{{ endpoint.SSHKeyFile }}"

    - name: Run Encrypt Command binary
      when:
        - seaa_automation_strategy == "generate_deploy_yaml" or seaa_automation_strategy == "deploy_yaml"
      block:

        - name: Accept license for Encrypt CLI
          ansible.builtin.shell: |
            set -o pipefail
            zoscb-encrypt license --accept
          args:
            executable: /bin/bash
          register: encrypt_secret_license
          changed_when: encrypt_secret_license.rc != 0

        - name: Block to - Encrypt SSH Key without passphrase
          when:
            - endpoint.SSHKeyPassPhrase == ""
          block:
            - name: Encrypt SSH Key without passphrase
              ansible.builtin.shell: |
                set -o pipefail
                oc login --token={{ ocp_cluster.auth_token }} \
                --server=https://{{ ocp_cluster.hostname }}:{{ ocp_cluster.port }} \
                {{ "--insecure-skip-tls-verify" if not config_var_cluster_validate_certs | bool else '--certificate-authority='~config_var_cluster_cacert }} &&
                oc project {{ project_namespace.name }} &&
                zoscb-encrypt credential-secret -n {{ _ssh_key_name }} -u {{ endpoint.username }} \
                --namespace {{ project_namespace.name }} -s {{ sshkeyfile }} 2>&1
              args:
                executable: /bin/bash
              register: encrypt_secret
              changed_when: encrypt_secret.rc != 0
              no_log: "{{ seaa_security_secure_log | default(true) | bool }}"

            - name: Set secret_deployed flag
              when: encrypt_secret.rc == 0
              ansible.builtin.set_fact:
                secret_deployed: true

        - name: Block to - Encrypt SSH Key with Passphrase
          when:
            - endpoint.SSHKeyPassPhrase != ""
          block:
            - name: Encrypt SSH Key with Passphrase
              ansible.builtin.shell: |
                set -o pipefail
                export PASSPHRASE={{ endpoint.SSHKeyPassPhrase }} &&
                oc login --token={{ ocp_cluster.auth_token }} \
                --server=https://{{ ocp_cluster.hostname }}:{{ ocp_cluster.port }} \
                {{ "--insecure-skip-tls-verify" if not config_var_cluster_validate_certs | bool else '--certificate-authority='~config_var_cluster_cacert }} &&
                oc project {{ project_namespace.name }} &&
                zoscb-encrypt credential-secret -n {{ _ssh_key_name }} -u {{ endpoint.username }} \
                --namespace {{ project_namespace.name }} -s {{ sshkeyfile }} -p &&
                unset PASSPHRASE 2>&1
              args:
                executable: /bin/bash
              register: encrypt_secret
              changed_when: encrypt_secret.rc != 0
              no_log: "{{ seaa_security_secure_log | default(true) | bool }}"

            - name: Set secret_deployed flag
              when: encrypt_secret.rc == 0
              ansible.builtin.set_fact:
                secret_deployed: true

      rescue:
        - name: Fail creating encrypted secret failed. Failed task is '{{ ansible_failed_task.name }}'
          ansible.builtin.fail:
            msg: "Unable to deploy encrypted secret. See details: {{ ansible_failed_result }}"
  always:
    - name: "Delete temporary files"
      when:
        - clean_tmp_files
        - seaa_automation_strategy == "deploy_yaml"
      ansible.builtin.file:
        path: "{{ tmp_dir }}"
        state: absent

- name: Add command to deployment script and README to deploy SSHKey Encrypted Secrets
  when:
    - _secret_type == "sshkey"
    - seaa_deploy_secrets | bool
    - _deploy_type == "deploy" and _seaa_encrypt_secrets
    - seaa_automation_strategy == "generate_deploy_yaml" or seaa_automation_strategy == "generate_yaml"
    # - secret_deployed or seaa_automation_strategy == "generate_yaml"
    - seaa_deploy_role == "admin" or
      (oc_product.credential_type == "personal" and seaa_deploy_role == "developer") # Create credential if shared-admin or personal-developer
  no_log: "{{ no_log }}"
  block:

    - name: Generate command for deploying encrypted secret
      ansible.builtin.include_tasks: "{{ seaa_ansible_directory }}/tasks/generate_cmd.yml"
      vars:
        command_to_execute: "zoscb-encrypt"
        command_secret: "{{ endpoint.SSHKeyPassPhrase }}"
        script_command: "deployCredSecret"
        script_command_comment: "({{ _cred_type | upper }}) 'Secret' - '{{ seaa_sshkey_secrets_prefix }}{{ endpoint.username }}-{{ endpoint.name }}' for '\
         {{ _resource_kind }}' user '{{ endpoint.username }}' on '{{ endpoint.name }}'"
        script_command_string: "{{ seaa_sshkey_secrets_prefix }}{{ endpoint.username }}-{{ endpoint.name }} {{ endpoint.username }} {{ endpoint.SSHKeyFile }} \
         {{ endpoint.name }} {{ _resource_kind }} '({{ _cred_type | upper }})'"
        is_encrypted: true
        deploy_name: "{{ seaa_sshkey_secrets_prefix }}{{ endpoint.username }}-{{ endpoint.name }}"
        deploy_kind: Secret
        deploy_file: ""

- name: Deploy Non Encrypted OCP SSHKey Secret with YAML
  when:
    - _secret_type == "sshkey"
    - seaa_deploy_secrets | bool
    - seaa_automation_strategy == "generate_deploy_yaml" or seaa_automation_strategy == "generate_yaml" or seaa_automation_strategy == "deploy_yaml"
    - not _seaa_encrypt_secrets
    - _deploy_type == "deploy" or _deploy_type == "testing"
    - (seaa_deploy_role == "admin") or
      (oc_product.credential_type == "personal" and seaa_deploy_role == "developer") # Create credential if shared-admin or personal-developer
  block:

    - name: Generate unencrypted Secret yaml file
      when:
        - seaa_automation_strategy != "deploy_yaml"
        - _deploy_type != "testing"
      ansible.builtin.include_tasks: "{{ seaa_ansible_directory }}/tasks/generate_yaml.yml"
      vars:
        src: "{{ seaa_ansible_directory }}/yamls/secrets/zos-ssh-key.yaml"
        destination_file: "{{ seaa_sshkey_secrets_prefix }}{{ endpoint.username }}-{{ endpoint.name }}.yaml"
        is_secret: true
        is_ocp_resource: true

    - name: Deploy non-encrypted Secret
      when:
        - seaa_automation_strategy != "generate_yaml"
      kubernetes.core.k8s:
        state: present
        namespace: "{{ project_namespace.name }}"
        definition: "{{ lookup('template', seaa_ansible_directory~'/yamls/secrets/zos-ssh-key.yaml') | from_yaml }}"
        force: true

- name: Undeploy SSHKey Secret Encrypted and Non Encrypted
  when:
    - _secret_type == "sshkey"
    - seaa_deploy_secrets | bool
    - seaa_automation_strategy == "generate_deploy_yaml" or seaa_automation_strategy == "generate_yaml" or seaa_automation_strategy == "deploy_yaml"
    - _deploy_type == "undeploy"
    - (seaa_deploy_role == "admin") or
      (oc_product.credential_type == "personal" and seaa_deploy_role == "developer") # Create credential if shared-admin or personal-developer
  block:
    - name: Undeploy unencrypted secret
      when:
        - not _seaa_encrypt_secrets
      block:
        - name: Generate unencrypted Secret yaml file
          when:
            - seaa_automation_strategy != "deploy_yaml"
          ansible.builtin.include_tasks: "{{ seaa_ansible_directory }}/tasks/generate_yaml.yml"
          vars:
            src: "{{ seaa_ansible_directory }}/yamls/secrets/zos-ssh-key.yaml"
            destination_file: "{{ seaa_sshkey_secrets_prefix }}{{ endpoint.username }}-{{ endpoint.name }}.yaml"
            is_secret: true
            is_ocp_resource: true

        - name: UnDeploy encrypted or unencrypted Secret
          when:
            - seaa_automation_strategy != "generate_yaml"
          kubernetes.core.k8s:
            state: absent
            namespace: "{{ project_namespace.name }}"
            definition: "{{ lookup('template', seaa_ansible_directory~'/yamls/secrets/zos-ssh-key.yaml') | from_yaml }}"
            force: true

    - name: Undeploy encrypted secret
      when:
        - _seaa_encrypt_secrets
      block:
        - name: Check if Secret exist
          kubernetes.core.k8s_info:
            api_key: "{{ ocp_cluster.auth_token }}"
            kind: Secret
            namespace: "{{ project_namespace.name }}"
            api_version: v1
            name: "{{ seaa_sshkey_secrets_prefix }}{{ endpoint.username }}-{{ endpoint.name }}"
          register: secret_info

        - name: Delete Encrypted Secret
          when:
            - secret_info.resources is defined and secret_info.resources | length > 0
          ansible.builtin.shell: |
            oc delete secret "{{ seaa_sshkey_secrets_prefix }}{{ endpoint.username }}-{{ endpoint.name }}" -n "{{ namespace }}"
          args:
            executable: /bin/bash
          register: encrypt_secret
          changed_when: encrypt_secret.rc == 0

- name: "Check for {{ _deploy_type | upper }}ment of \
   OpenShift SSHKey Secret '{{ _ssh_key_name }}' in '{{ project_namespace.name }}' on '{{ ocp_cluster.hostname }}'"
  ansible.builtin.pause:
    prompt: "{{ _deploy_type | upper }}ment of OpenShift SSHKey Secret resource with Native YAML API, press enter to continue ...:"
  when:
    - _secret_type == "sshkey"
    - seaa_automation.prompt_during_automation | bool
    - seaa_automation.track_resources | bool
