#
# Copyright 2023 IBM Inc. All rights reserved
# SPDX-License-Identifier: Apache2.0
#

---
- name: Set variables and facts for manage secrets task
  ansible.builtin.set_fact:
    seaa_encrypt: "{{ seaa_encrypt_secrets | bool }}"
    namespace: "{{ this_project_name }}" # "{{ current_namespace }}"
    _deploy_type: "{{ deploy_type | default(seaa_deploy_strategy, true) }}"
    _ssh_key_name: "{{ seaa_sshkey_secrets_prefix }}{{ endpoint.username }}-{{ endpoint.name }}"
    encrypt_with_binary: true
    tmp_dir: "{{ lookup('env', 'HOME') }}/.seaa/_tmp_"
    _secret_deployed: false
    clean_tmp_files: true
    _no_log: false
    _resource_kind: "{{ resource_kind | default('') }}"
    _cred_type: "{{ cred_type | default('') }}" # Personal or Shared
    _copy_binary: false

- name: Generate and Deploy Encrypted Secrets with Binary
  when:
    - seaa_deploy_secrets | bool
    - seaa_encrypt and encrypt_with_binary
    - _deploy_type == "deploy" or _deploy_type == "testing"
    - (seaa_deploy_role == "admin") or
      (oc_product.credential_type == "personal" and seaa_deploy_role == "developer") # Create credential if admin or personal-developer
  no_log: "{{ _no_log }}"
  block:

    - name: Deploy Encrypted Secrets with provided Vault Password File
      when:
        - seaa_ansible_vault_password_file is not none
        - seaa_ansible_vault_password_file != ''
      no_log: "{{ _no_log }}"
      block:

        - name: "Create temporary file directory"
          ansible.builtin.file:
            path: "{{ tmp_dir }}"
            state: directory
            mode: '0755'

        - name: Generate TMP File
          ansible.builtin.tempfile:
            state: file
            suffix: seaa
            path: "{{ tmp_dir }}"
          register: temp_encrypt_sshkey_file

        - name: Copy Encrypted file to temporary file provided Vault Password File
          ansible.builtin.copy:
            src: "{{ seaa_path_to_encrypted_files }}/{{ endpoint.SSHKeyFile }}"
            dest: "{{ temp_encrypt_sshkey_file.path }}"
            mode: preserve
          register: copy_and_decrypt_output

        - name: Set SSH Key file to encrypt
          ansible.builtin.set_fact:
            sshkeyfile: "{{ temp_encrypt_sshkey_file.path }}"
          when: copy_and_decrypt_output.changed # noqa: no-handler

    - name: Set SSH Key file to encrypt
      ansible.builtin.set_fact:
        sshkeyfile: "{{ endpoint.SSHKeyFile }}"
      when:
        - seaa_ansible_vault_password_file is none or seaa_ansible_vault_password_file == ''

    - name: Run Encrypt Command binary
      when:
        # - file_exist
        - seaa_automation_strategy == "generate_deploy_yaml" or seaa_automation_strategy == "deploy_yaml"
      block:

        - name: Accept license for Encrypt CLI
          ansible.builtin.shell: |
            set -o pipefail
            zoscb-encrypt license --accept
          args:
            executable: /bin/bash
          register: encrypt_secret_license
          changed_when: encrypt_secret_license.rc != 0

        - name: Block to - Encrypt SSH Key without passphrase
          when:
            - endpoint.SSHKeyPassPhrase == ""
          block:
            - name: Encrypt SSH Key without passphrase
              ansible.builtin.shell: |
                set -o pipefail
                oc login --token={{ ocp_cluster.auth_token }} \
                --server=https://{{ ocp_cluster.hostname }}:{{ ocp_cluster.port }} \
                {{ "--insecure-skip-tls-verify" if not config_var_cluster_validate_certs | bool else '--certificate-authority='~config_var_cluster_cacert }} &&
                oc project {{ project_namespace.name }} &&
                zoscb-encrypt credential-secret -n {{ _ssh_key_name }} -u {{ endpoint.username }} \
                --namespace {{ project_namespace.name }} -s {{ sshkeyfile }} 2>&1
              args:
                executable: /bin/bash
              register: encrypt_secret
              changed_when: encrypt_secret.rc != 0
              no_log: "{{ seaa_security_secure_log | default(true) | bool }}"

            - name: Set _secret_deployed flag
              when: encrypt_secret.rc == 0
              ansible.builtin.set_fact:
                _secret_deployed: true

        - name: Block to - Encrypt SSH Key with Passphrase
          when:
            - endpoint.SSHKeyPassPhrase != ""
          block:
            - name: Encrypt SSH Key with Passphrase
              ansible.builtin.shell: |
                set -o pipefail
                export PASSPHRASE={{ endpoint.SSHKeyPassPhrase }} &&
                oc login --token={{ ocp_cluster.auth_token }} \
                --server=https://{{ ocp_cluster.hostname }}:{{ ocp_cluster.port }} \
                {{ "--insecure-skip-tls-verify" if not config_var_cluster_validate_certs | bool else '--certificate-authority='~config_var_cluster_cacert }} &&
                oc project {{ project_namespace.name }} &&
                zoscb-encrypt credential-secret -n {{ _ssh_key_name }} -u {{ endpoint.username }} \
                --namespace {{ project_namespace.name }} -s {{ sshkeyfile }} -p 2>&1
              args:
                executable: /bin/bash
              register: encrypt_secret
              changed_when: encrypt_secret.rc != 0
              no_log: "{{ seaa_security_secure_log | default(true) | bool }}"

            - name: Set _secret_deployed flag
              when: encrypt_secret.rc == 0
              ansible.builtin.set_fact:
                _secret_deployed: true

      rescue:
        - name: Fail creating encrypted secret failed. Failed task is '{{ ansible_failed_task.name }}'
          ansible.builtin.fail:
            msg: "Unable to deploy encrypted secret. See details: {{ ansible_failed_result }}"
  always:
    - name: "Delete temporary files"
      when:
        - clean_tmp_files
        - seaa_automation_strategy == "deploy_yaml"
      ansible.builtin.file:
        path: "{{ tmp_dir }}"
        state: absent

- name: Add command to deployment script and README to deploy Encrypted Secrets
  when:
    - seaa_deploy_secrets | bool
    - _deploy_type == "deploy" and seaa_encrypt
    - seaa_automation_strategy == "generate_deploy_yaml" or seaa_automation_strategy == "generate_yaml"
    - _secret_deployed or seaa_automation_strategy == "generate_yaml"
    - seaa_deploy_role == "admin" or
      (oc_product.credential_type == "personal" and seaa_deploy_role == "developer") # Create credential if shared-admin or personal-developer
  no_log: "{{ _no_log }}"
  block:

    - name: Generate command for deploying encrypted secret
      ansible.builtin.include_tasks: "{{ seaa_ansible_directory }}/tasks/generate_cmd.yml"
      vars:
        command_to_execute: "zoscb-encrypt"
        command_secret: "{{ endpoint.SSHKeyPassPhrase }}"
        script_command: "deployCredSecret"
        script_command_comment: "({{ _cred_type | upper }}) 'Secret' - '{{ seaa_sshkey_secrets_prefix }}{{ endpoint.username }}-{{ endpoint.name }}' for '\
         {{ _resource_kind }}' user '{{ endpoint.username }}' on '{{ endpoint.name }}'"
        script_command_string: "{{ seaa_sshkey_secrets_prefix }}{{ endpoint.username }}-{{ endpoint.name }} {{ endpoint.username }} {{ endpoint.SSHKeyFile }} \
         {{ endpoint.name }} {{ _resource_kind }} '({{ _cred_type | upper }})'"
        is_encrypted: true
        deploy_name: "{{ seaa_sshkey_secrets_prefix }}{{ endpoint.username }}-{{ endpoint.name }}"
        deploy_kind: Secret
        deploy_file: ""

- name: Deploy Non Encrypted OCP Secret with YAML
  when:
    - seaa_deploy_secrets | bool
    - seaa_automation_strategy == "generate_deploy_yaml" or seaa_automation_strategy == "generate_yaml" or seaa_automation_strategy == "deploy_yaml"
    - not seaa_encrypt
    - _deploy_type == "deploy" or _deploy_type == "testing"
    - (seaa_deploy_role == "admin") or
      (oc_product.credential_type == "personal" and seaa_deploy_role == "developer") # Create credential if shared-admin or personal-developer
  block:

    - name: Generate unencrypted Secret yaml file
      when:
        - seaa_automation_strategy != "deploy_yaml"
        - _deploy_type != "testing"
      ansible.builtin.include_tasks: "{{ seaa_ansible_directory }}/tasks/generate_yaml.yml"
      vars:
        src: "{{ seaa_ansible_directory }}/yamls/secrets/zos-ssh-key.yaml"
        destination_file: "{{ seaa_sshkey_secrets_prefix }}{{ endpoint.username }}-{{ endpoint.name }}.yaml"
        is_secret: true
        is_ocp_resource: true

    - name: Deploy non-encrypted Secret
      when:
        - seaa_automation_strategy != "generate_yaml"
      kubernetes.core.k8s:
        state: present
        namespace: "{{ project_namespace.name }}"
        definition: "{{ lookup('template', seaa_ansible_directory~'/yamls/secrets/zos-ssh-key.yaml') | from_yaml }}"
        force: true

- name: Undeploy Secret Encrypted and Non Encrypted
  when:
    - seaa_deploy_secrets | bool
    - seaa_automation_strategy == "generate_deploy_yaml" or seaa_automation_strategy == "generate_yaml" or seaa_automation_strategy == "deploy_yaml"
    - _deploy_type == "undeploy"
    - (seaa_deploy_role == "admin") or
      (oc_product.credential_type == "personal" and seaa_deploy_role == "developer") # Create credential if shared-admin or personal-developer
  block:
    - name: Undeploy unencrypted secret
      when:
        - not seaa_encrypt
      block:
        - name: Generate unencrypted Secret yaml file
          when:
            - not seaa_encrypt
            - seaa_automation_strategy != "deploy_yaml"
          ansible.builtin.include_tasks: "{{ seaa_ansible_directory }}/tasks/generate_yaml.yml"
          vars:
            src: "{{ seaa_ansible_directory }}/yamls/secrets/zos-ssh-key.yaml"
            destination_file: "{{ seaa_sshkey_secrets_prefix }}{{ endpoint.username }}-{{ endpoint.name }}.yaml"
            is_secret: true
            is_ocp_resource: true

        - name: UnDeploy encrypted or unencrypted Secret
          when:
            - seaa_automation_strategy != "generate_yaml"
          kubernetes.core.k8s:
            state: absent
            namespace: "{{ project_namespace.name }}"
            definition: "{{ lookup('template', seaa_ansible_directory~'/yamls/secrets/zos-ssh-key.yaml') | from_yaml }}"
            force: true

    - name: Undeploy encrypted secret
      when:
        - seaa_encrypt
      block:
        - name: Check if Secret exist
          kubernetes.core.k8s_info:
            api_key: "{{ ocp_cluster.auth_token }}"
            kind: Secret
            namespace: "{{ project_namespace.name }}"
            api_version: v1
            name: "{{ seaa_sshkey_secrets_prefix }}{{ endpoint.username }}-{{ endpoint.name }}"
          register: secret_info

        - name: Delete Encrypted Secret
          when:
            - secret_info.resources is defined and secret_info.resources | length > 0
          ansible.builtin.shell: |
            oc delete secret "{{ seaa_sshkey_secrets_prefix }}{{ endpoint.username }}-{{ endpoint.name }}" -n "{{ namespace }}"
          args:
            executable: /bin/bash
          register: encrypt_secret
          changed_when: encrypt_secret.rc == 0

- name: Check for {{ _deploy_type | upper }}ment of OpenShift Secret '{{ _ssh_key_name }}' in '{{ project_namespace.name }}' on '{{ ocp_cluster.hostname }}'"
  ansible.builtin.pause:
    prompt: "{{ _deploy_type | upper }}ment of OpenShift Secret resource with Native YAML API, press enter to continue ...:"
  when:
    - seaa_automation.prompt_during_automation | bool
    - seaa_automation.track_resources | bool
