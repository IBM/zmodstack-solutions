#
# Copyright 2023 IBM Inc. All rights reserved
# SPDX-License-Identifier: Apache2.0
#

---
- name: Set fact local_secure_log
  ansible.builtin.set_fact:
    local_secure_log: "{{ seaa_security_secure_log_1password | default(true) | bool }}"

- name: Wait for user to proceed
  ansible.builtin.pause:
    prompt: seaa_security_secure_log_1password should ALWAYS be set to 'true' UNLESS DEBUGGING password vault issue!!!
  when: not local_secure_log

- name: Manually authenticate with master password
  when: master_password is defined and master_password is not none
  no_log: "{{ local_secure_log }}"
  block:
    - name: Manually add 1password account
      when: op_secret_key is defined
      ansible.builtin.shell:
        cmd: set -o pipefail && yes "{{ master_password }}" | op account add --account "{{ account }}" --address "{{ address }}" --email "{{ email }}"
      register: password_account
      changed_when: password_account.rc != 0
      environment:
        OP_SECRET_KEY: "{{ op_secret_key }}"

    - name: Sign in to 1password account
      when: op_secret_key is defined
      ansible.builtin.shell:
        cmd: set -o pipefail && yes "{{ master_password }}" | op signin -f --raw
      register: session_token
      changed_when: session_token.rc != 0
      environment:
        OP_SECRET_KEY: "{{ op_secret_key }}"

    - name: With session query all details for the "{{ item_name }}" item and return in json format to stdout
      when: session_token is defined
      ansible.builtin.command: op item get "{{ item_name }}" --format json --session "{{ session_token.stdout }}"
      register: onepassword_output
      changed_when: onepassword_output.rc != 0

    - name: Get username
      when: is_login_type_item
      ansible.builtin.set_fact:
        vault_username: "{{ onepassword_output.stdout | from_json | json_query('fields[0].value') }}"

    - name: Get secret
      ansible.builtin.set_fact:
        vault_password: "{{ onepassword_output.stdout | from_json | json_query('fields[1].value') }}"

- name: Authenticate without master password
  when: master_password is undefined or master_password is none
  no_log: "{{ local_secure_log }}"
  block:
    - name: Query all details for the "{{ item_name }}" item and return in json format to stdout
      when: master_password is not defined or master_password is none
      ansible.builtin.command: op item get "{{ item_name }}" --format json
      register: onepassword_output
      changed_when: onepassword_output.rc != 0

    - name: Get username
      when: is_login_type_item
      ansible.builtin.set_fact:
        vault_username: "{{ onepassword_output.stdout | from_json | json_query(jmesquery) | first }}"
      vars:
        jmesquery: "fields[? id=='username'].value"

    - name: Get secret
      ansible.builtin.set_fact:
        vault_password: "{{ onepassword_output.stdout | from_json | json_query(jmesquery) | first }}"
      vars:
        jmesquery: "fields[? id=='password'].value"
