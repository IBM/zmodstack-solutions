#
# Copyright 2023 IBM Inc. All rights reserved
# SPDX-License-Identifier: Apache2.0
#

---
# HANDLE Cache and initialize variables for GENERATING YAML, SCRIPTS and README files
- name: Set flags for Generating YAML files
  when: seaa_automation_strategy == "generate_yaml" or seaa_automation_strategy == "generate_deploy_yaml"
  tags:
    - always
  block:

    #  Update cache with new namespace
    - name: Update sticky project with last readme step_count
      when:
        - ocp_cluster_cache is defined and ocp_cluster_cache != None
        - readme_step_count is defined and readme_step_count > 0
        - sticky_project_name is defined and sticky_project_name != ''
        - sticky_ocphost is defined and sticky_ocphost != ''
      ansible.builtin.set_fact:
        ocp_cluster_cache: "{{ ocp_cluster_cache | update_cache_for_generating_files(sticky_ocphost, sticky_project_name, readme_step_count, \
          'readme_has_started') }}"

    - name: Reset flags for Generating YAML
      ansible.builtin.set_fact:
        script_has_started: false
        readme_has_started: false
        readme_step_count: 0
        sticky_ocphost: ''
        sticky_project_name: ''

    # Check ocp_cluster_cache dictionary to see if Script is beineg generated on current host and namespace
    - name: Check Script has started to be generated for '{{ this_project_name }}' on '{{ current_ocphost }}'"
      ansible.builtin.set_fact:
        query_script_has_started: >-
          {{ ocp_cluster_cache
            | json_query(jmespath)
          }}
      when: ocp_cluster_cache is defined
      vars:
        jmespath: "{{ jmesq_script_started }}"

    - name: Set script_has_started fact from cache
      ansible.builtin.set_fact:
        script_has_started: true
      when:
        - query_script_has_started | type_debug != "NoneType"
        - query_script_has_started is not none
        - query_script_has_started | length > 0

    # Check ocp_cluster_cache dictionary to see if Readme is beineg generated on current host and namespace
    - name: Check README has started to be generated for "{{ this_project_name }}' on '{{ current_ocphost }}'"
      ansible.builtin.set_fact:
        query_readme_has_started: >-
          {{ ocp_cluster_cache
            | json_query(jmespath)
          }}
      when: ocp_cluster_cache is defined
      vars:
        jmespath: "{{ jmesq_readme_started }}"

    - name: Set readme_has_started fact from cache
      ansible.builtin.set_fact:
        readme_has_started: true
        readme_step_count: "{{ query_readme_has_started[0] | int }}"
      when:
        - query_readme_has_started | type_debug != "NoneType"
        - query_readme_has_started is not none
        - query_readme_has_started | length > 0

    # Debug automation deployed status
    - name: Debug '{{ seaa_deploy_strategy }}' variables
      when: seaa_automation.debug | bool
      block:
        - name: Debug var ocp_cluster_cache
          ansible.builtin.debug:
            var: ocp_cluster_cache
          no_log: "{{ seaa_security_secure_log | default(true) | bool }}"

        - name: Debug var current_ocphost
          ansible.builtin.debug:
            var: current_ocphost

        - name: Debug var this_project_name
          ansible.builtin.debug:
            var: this_project_name

        - name: Debug var script_has_started
          ansible.builtin.debug:
            var: script_has_started

        - name: Debug var readme_has_started
          ansible.builtin.debug:
            var: readme_has_started

        - name: Debug var readme_step_count
          ansible.builtin.debug:
            var: readme_step_count

        - name: Waiting for user response
          ansible.builtin.pause:
            prompt: "PRE-Check GENERATE status - '{{ seaa_deploy_strategy }}' of '{{ seaa_deploy_objective }}' in '\
            {{ this_project_name }}' on '{{ current_ocphost }}', enter to continue..."
          when: seaa_automation.prompt_during_automation | bool

